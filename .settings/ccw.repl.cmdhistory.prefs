cmdhistory=["({\:a 1} \:a)" "({\:a 1} \:b)" "(run-turing 0 0 0 0 0)" "(def a (atom []))" "a" "(swap\! a 5)" "a" "(swap\! a [5])" "a" "(swap\! a (assoc 5))" "(swap\! a conj 5)" "(swap\! a conj 6)" "a" "(deref atom)" "(deref a)" "a" "(def a (atom {}))" "a" "(swap\! a conj [0 1])" "a" "(into-array \\"1 2 3\\")" "(readstring (str \\"[\\" \\"0 0 0 0 0 0\\" \\"]\\"))" "(read-string (str \\"[\\" \\"0 0 0 0 0 0\\" \\"]\\"))" "(vec 0 0)" "(vector-to-tuple [0 0 0 0 0])" "(read-tuples-from-file \\"swap.txt\\")" "(def a (read-tuples-from-file \\"swap.txt\\"))" "a" "(def b (atom {}))" "(swap\! b conj a)" "(b [0 _])" "(def a (read-tuples-from-file \\"swap.txt\\"))" "(char _)" "-" "_" "n" "(def a (read-tuples-from-file \\"swap.txt\\"))" "a" "(swap\! b conj a)" "(read-tuples-from-file \\"swap.txt\\")" "(atom \\"\\")" "(swap\! (atom \\"\\") \\"6\\")" "(swap\! (atom \\"\\") inc)" "(swap\! (atom \\"\\") str \\"5\\")" "(read-tuples-from-file \\"swap.txt\\")" "(def a (atom \\"\\"))" "(replace a str \\"4\\")" "(reset\! a str \\"4\\")" "(reset\! a \\"4\\")" "a" "(read-tuples-from-file \\"swap.txt\\")" "a" "@a" "(swap\! a \\"5\\")" "(swap\! a str \\"5\\")" "(reset\! a \\"4\\")" "@a" "(read-tuples-from-file \\"swap.txt\\")" "(def scan (Scanner. (BufferedReader. (FileReader. \\"swap.txt\\"))))" "scan" "(read-tuples-from-file \\"swap.txt\\")" "a" "(str \\"/\\" a)" "(str \\"@\\" a)" "(read-string (str \\"@\\" a))" "(str @a)" "(read-tuples-from-file \\"swap.txt\\")" "(if (\= 0 1) 0 (+ 2 2))" "(if (\= 0 0) 0 (+ 2 2))" "(read-tuples-from-file \\"swap.txt\\")" "\\\\_" "(print \\\\_)" "(char \\\\5)" "(char (str \\"\\\\\\" (+ 2 2)))" "(str \\"\\\\\\" (+ 2 2))" "(str \\"\\\\\\" 5)" "(str \\"\\\\\\\\\\" 5)" "(str \\"/\\\\\\" 5)" "(str \\"\\\\/\\" 5)" "(Char 5)" "(char 5)" "(char a)" "(char l)" "(char 'l')" "(seq 5)" "(int 5)" "(seq (str 5))" "(read-tuples-from-file \\"swap.txt\\")" "(seq (str 5))" "(first (seq (str 5)))" "(read-tuples-from-file \\"swap.txt\\")" "(def a [1 2])" "a" "(char (array 0))" "(char (first array))" "(first array)" "(array first)" "(char (first a))" "(first a)" "(a first)" "(a 1)" "(char (a 1))" "(rot13 (first \\"a\\"))" "(map char (concat (range 48 58) (range 66 92) (range 97 123)))" "(time (map char (concat (range 48 58) (range 66 92) (range 97 123))))" "(time (pmap char (concat (range 48 58) (range 66 92) (range 97 123))))" "(time (pmap char (concat (range 48 58) (range 66 92) (range 97 100000))))" "(time (map char (concat (range 48 58) (range 66 92) (range 97 100000))))" "(time (map char (concat (range 48 58) (range 66 92) (range 97 100000000000))))" "(time (pmap char (concat (range 48 58) (range 66 92) (range 97 100000000000))))" "(time (map char (concat (range 48 58) (range 66 92) (range 97 100000000000000000))))" "(time (map char (concat (range 48 58) (range 66 92) (range 97 100000000000000000000000000000))))" "(time (pmap char (concat (range 48 58) (range 66 92) (range 97 100000000000000000000000000000))))" "(time (map char (concat (range 48 58) (range 66 92) (range 97 100000000000000000000000000000000000000000000000000000000000))))" "(time (pmap char (concat (range 48 58) (range 66 92) (range 97 100000000000000000000000000000000000000000000000000000000000))))" "(not nil)" "(read-tuples-from-file \\"swap.txt\\")" "(main-loop 0 0 (read-tuples-from-file \\"swap.txt\\") \\"_01010_\\")" "(def tup (read-tuples-from-file \\"swap.txt\\"))" "tup" "(.charAt \\"012abc\\" 0)" "(tuples [0 1])" "(tup [0 1])" "(tup [0 \\\\1])" "(not [0 \\\\0 r])" "(if [1 2] 0 1)" "(if nil 0 1)" "(main-loop 0 0 (read-tuples-from-file \\"swap.txt\\") \\"_01010\\")" "((tup [0 0]) 2)" "tup" "(tup [0 0])" "((tup [0 \\\\0]) 2)" "(\= ((tup [0 \\\\0]) 2) r)" "(def tup (read-tuples-from-file \\"swap.txt\\"))" "tup" "(\= ((tup [0 \\\\0]) 2) r)" "(\= ((tup [0 \\\\0]) 2) \\\\r)" "(\\"0102\\" 0)" "(StringBuilder.)" "(main-loop 0 0 tup \\"_010101_\\")" "(def sb (StringBuilder. \\"_0101010\\"))" "(.setCharAt sb 0 \\\\1)" "(.toString sb)" "(main-loop 0 0 tup \\"_010101_\\")" "(do (.setCharAt sb 0 \\\\1) (.toString sb))" "(main-loop 0 0 tup \\"_010101_\\")" "(main-loop 0 0 tup \\"_010101_\\" true)" "(main-loop 0 0 tup \\"_010101_\\" false)" "(main-loop 0 0 tup \\"_010101_\\" true)" "(insert-brackets \\"0000\\" 2)" "(insert-brackets \\"0000\\" (int 2))" "(def sb (StringBuilder. \\"00000000\\"))" "(def a 5)" "(.insert sb \\"5\\" a)" "(.insert sb 5 \\"5\\")" "(insert-brackets \\"0000\\" 2)" "(inc index)" "(index inc)" "(1 inc)" "(inc 1)" "(insert-brackets \\"0000\\" 2)" "(main-loop 0 0 tup \\"_010101_\\" true)" "(run-turing 0 0 \\"_0101010\\" \\"swap.txt\\" true)" "(run-turing 0 0 \\"_0101010_\\" \\"swap.txt\\" true)" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" false)" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(read2 \\"swap.txt\\")" "(slurp \\"swap.txt\\")" "(->> (slurp \\"swap.txt\\")\\n  (trim))" "(use 'clojure.string)" "(->> (slurp \\"swap.txt\\")\\n  (trim))" "(->> (slurp \\"swap.txt\\")\\n  (clojure.string/split-lines))" "(->> (slurp \\"swap.txt\\")\\n  (clojure.string/split-lines)\\n  (map vector-to-tuple))" "(->> (slurp \\"swap.txt\\")\\n  (clojure.string/split-lines)\\n  (map vector-to-tuple)\\n  (read-string)\\n  (str \\"[\\" \\"]\\"))" "(->> (slurp \\"swap.txt\\")\\n  (clojure.string/split-lines)\\n  (map vector-to-tuple)\\n  (read-string))" "(->> (slurp \\"swap.txt\\")\\n  (clojure.string/split-lines)\\n  (map vector-to-tuple))" "(->> (slurp \\"swap.txt\\")\\n  (clojure.string/split-lines)\\n  (map vector-to-tuple)\\n  (re-seq \#\\"\\\\d\\"))" "(->> (slurp \\"swap.txt\\")\\n  (clojure.string/split-lines)\\n  (map)\\n  (re-seq \#\\"\\\\d\\"))" "(->> (slurp \\"swap.txt\\")\\n  (clojure.string/split-lines)\\n  (map (re-seq \#\\"\\\\d\\")))" "(->> (slurp \\"swap.txt\\")\\n  (clojure.string/split-lines)\\n  (map \#(re-seq \#\\"\\\\d\\") ))" "(map \#(re-seq \#\\"\\\\d\\") [\\"0  _  0  _  r\\" \\"0  0  1  1  r\\" \\"0  1  1  0  r\\" \\"1  1  1  0  r\\" \\"1  0  1  1  r\\" \\"-1\\"])" "(map inc (range 3))" "(map \#(re-seq \#\\"\\\\d\\" %) [\\"0  _  0  _  r\\" \\"0  0  1  1  r\\" \\"0  1  1  0  r\\" \\"1  1  1  0  r\\" \\"1  0  1  1  r\\" \\"-1\\"])" "(map \#(re-seq \#\\"\\\\s\\" %) [\\"0  _  0  _  r\\" \\"0  0  1  1  r\\" \\"0  1  1  0  r\\" \\"1  1  1  0  r\\" \\"1  0  1  1  r\\" \\"-1\\"])" "(map \#(re-seq \#\\"\\\\c\\" %) [\\"0  _  0  _  r\\" \\"0  0  1  1  r\\" \\"0  1  1  0  r\\" \\"1  1  1  0  r\\" \\"1  0  1  1  r\\" \\"-1\\"])" "(map \#(re-seq \#\\" \\" %) [\\"0  _  0  _  r\\" \\"0  0  1  1  r\\" \\"0  1  1  0  r\\" \\"1  1  1  0  r\\" \\"1  0  1  1  r\\" \\"-1\\"])" "(map \#(re-seq \#\\"\\\\w\\" %) [\\"0  _  0  _  r\\" \\"0  0  1  1  r\\" \\"0  1  1  0  r\\" \\"1  1  1  0  r\\" \\"1  0  1  1  r\\" \\"-1\\"])" "(->> (slurp \\"swap.txt\\")\\n  (clojure.string/split-lines)\\n  (map \#(re-seq \#\\"\\\\w\\" %)))" "(->> (slurp \\"swap.txt\\")\\n  (clojure.string/split-lines)\\n  (map \#(re-seq \#\\"\\\\w\\" %))\\n  (remove (\\"1\\")))" "(->> (slurp \\"swap.txt\\")\\n  (clojure.string/split-lines)\\n  (map \#(re-seq \#\\"\\\\w\\" %))\\n  (remove \\"1\\"))" "(->> (slurp \\"swap.txt\\")\\n  (clojure.string/split-lines)\\n  (map \#(re-seq \#\\"\\\\w\\" %)))" "(->> (slurp \\"swap.txt\\")\\n  (clojure.string/split-lines)\\n  (map \#(re-seq \#\\"\\\\w\\" %))\\n  (butlast))" "(->> (slurp \\"swap.txt\\")\\n  (clojure.string/split-lines)\\n  (map \#(re-seq \#\\"\\\\w\\" %))\\n  (butlast)\\n  (map vector-to-tuple %))" "(->> (slurp \\"swap.txt\\")\\n  (clojure.string/split-lines)\\n  (map \#(re-seq \#\\"\\\\w\\" %))\\n  (butlast)\\n  (map vector-to-tuple))" "(->> (slurp \\"swap.txt\\")\\n  (clojure.string/split-lines)\\n  (map \#(re-seq \#\\"\\\\w\\" %))\\n  (butlast))" "((1 2) (3 4) (5 6))" "(into [] ((1 2) (3 4) (5 6)))" "(into [] '((1 2) (3 4) (5 6)))" "(into [] '('(1 2) '(3 4) '(5 6)))" "(map \#(into [] %) '((1 2) (3 4) (5 6)))" "(into [] (map \#(into [] %) '((1 2) (3 4) (5 6))))" "(->> (slurp \\"swap.txt\\")\\n     (clojure.string/split-lines)\\n     (map \#(re-seq \#\\"\\\\w\\" %))\\n     (butlast)\\n     (into [])\\n     (map \#(into [] %))\\n     (quote))" "(->> (slurp \\"swap.txt\\")\\n     (clojure.string/split-lines)\\n     (map \#(re-seq \#\\"\\\\w\\" %))\\n     (butlast)\\n     (into [])\\n     (map \#(into [] %)))" "(->> (slurp \\"swap.txt\\")\\n     (clojure.string/split-lines)\\n     (map \#(re-seq \#\\"\\\\w\\" %))\\n     (butlast)\\n     (map \#(into [] %))\\n     (into []))" "(->> (slurp \\"swap.txt\\")\\n     (clojure.string/split-lines)\\n     (map \#(re-seq \#\\"\\\\w\\" %))\\n     (butlast)\\n     (map \#(into [] %))\\n     (into [])\\n     (map vector-to-tuple))" "(into {} ([[\\"0\\" \\\\_] [\\"0\\" \\\\_ \\\\r]] [[\\"0\\" \\\\0] [\\"1\\" \\\\1 \\\\r]] [[\\"0\\" \\\\1] [\\"1\\" \\\\0 \\\\r]] [[\\"1\\" \\\\1] [\\"1\\" \\\\0 \\\\r]] [[\\"1\\" \\\\0] [\\"1\\" \\\\1 \\\\r]]))" "(->> (slurp \\"swap.txt\\")\\n     (clojure.string/split-lines)\\n     (map \#(re-seq \#\\"\\\\w\\" %))\\n     (butlast)\\n     (map \#(into [] %))\\n     (into []))" "(->> (slurp \\"swap.txt\\")\\n     (clojure.string/split-lines)\\n     (map \#(re-seq \#\\"\\\\w\\" %))\\n     (butlast)\\n     (map \#(into [] %))\\n     (into [])\\n     (reduce vector-to-tuple2))" "(->> (slurp \\"swap.txt\\")\\n     (clojure.string/split-lines)\\n     (map \#(re-seq \#\\"\\\\w\\" %))\\n     (butlast)\\n     (map \#(into [] %))\\n     (into [])\\n     (reduce vector-to-tuple2 %))" "(->> (slurp \\"swap.txt\\")\\n     (clojure.string/split-lines)\\n     (map \#(re-seq \#\\"\\\\w\\" %))\\n     (butlast)\\n     (map \#(into [] %))\\n     (into [])\\n     (reduce vector-to-tuple2 % %2))" "(->> (slurp \\"swap.txt\\")\\n     (clojure.string/split-lines)\\n     (map \#(re-seq \#\\"\\\\w\\" %))\\n     (butlast)\\n     (map \#(into [] %))\\n     (into [])\\n     (reduce vector-to-tuple2 %2 %))" "(->> (slurp \\"swap.txt\\")\\n     (clojure.string/split-lines)\\n     (map \#(re-seq \#\\"\\\\w\\" %))\\n     (butlast)\\n     (map \#(into [] %))\\n     (into [])\\n     (reduce vector-to-tuple2 {}))" "(read-tuples-from-file \\"swap.txt\\")" "(->> (slurp \\"swap.txt\\")\\n     (clojure.string/split-lines)\\n     (map \#(re-seq \#\\"\\\\w\\" %))\\n     (butlast)\\n     (map \#(into [] %))\\n     (into [])\\n     (reduce vector-to-tuple2 {}))" "(run-turing)" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(string-to-char \\"s\\")" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(read-tuples-from-file2 \\"swap.txt\\")" "(defn execute [[s p t]]\\n   (let [action (tuples [s (.charAt t p)])\\n         string-builder (StringBuilder. t)]\\n       [(action 0)\\n        (+ p (if (\= (action 2) \\\\r) 1 -1))\\n        (do (.setCharAt string-builder p (action 1))\\n                   string-builder)\\n        ]     \\n    )\\n  )" "(def tuples (read-tuples-from-file2 \\"swap.txt\\"))" "(defn execute [[s p t]]\\n   (let [action (tuples [s (.charAt t p)])\\n         string-builder (StringBuilder. t)]\\n       [(action 0)\\n        (+ p (if (\= (action 2) \\\\r) 1 -1))\\n        (do (.setCharAt string-builder p (action 1))\\n                   string-builder)\\n        ]     \\n    )\\n  )" "(execute [0 0 \\"_01010\\"])" "(defn execute [[s p t]]\\n   (let [action (tuples [s (.charAt t p)])\\n         string-builder (StringBuilder. t)]\\n       [(action 0)\\n        (+ p (if (\= (action 2) \\\\r) 1 -1))\\n        (do (.setCharAt string-builder p (action 1))\\n                   (.toString string-builder))\\n        ]     \\n    )\\n  )" "(execute [0 0 \\"_01010\\"])" "(def tuples (read-tuples-from-file2 \\"swap.txt\\"))" "(execute [0 0 \\"_0101010\\"] tuples)" "(iterate (execute [0 0 \\"_0101010\\"] tuples))" "(iterate execute [0 0 \\"_0101010\\"] tuples)" "(iterate execute [[0 0 \\"_0101010\\"] tuples])" "(take 3 (iterate execute [[0 0 \\"_0101010\\"] tuples]))" "(def tup (iterate execute [[0 0 \\"_0101010\\"] tuples]))" "(take 3 tup)" "tup" "(def tup (iterate execute [[0 0 \\"_0101010_\\"] tuples]))" "(take 3 tup)" "(clojure.string/split \\"1 0 1 0 r\\" \#\\"\\\\s*-?\\\\d+\\\\s+.\\\\s+-?\\\\d+\\\\s+.\\\\s+[r|l]\\\\s*\\")" "(map read-string \\"1 0 1 0 r\\")" "(map read-string \\"1 2 1 2\\")" "(map read-string [\\"1 2 1 2\\"])" "(map read-string (clojure.string/split \#\\"\\\\s+\\" \\"1 2 1 2\\"))" "(map read-string (clojure.string/split \\"1 2 1 2\\" \#\\"\\\\s+\\"))" "(map read-string (clojure.string/split \\"1 2 1 a\\" \#\\"\\\\s+\\"))" "(re-find \#\\"(\\\\S+)\:(\\\\d+)\\" \\"1 0 2 0 r\\")" "(re-find \#\\"(\\\\s+)\:(\\\\d+)\\" \\"1 0 2 0 r\\")" "(re-find \#\\"\\\\d\\\\d\\\\d\\\\d\\\\w\\" \\"1 0 2 0 r\\")" "(re-find \#\\"\\\\d\\\\d\\\\d\\\\d\\\\w\\" \\" as 1 0 2 0 r\\")" "(iterate inc 5)" "(take 5 (iterate inc 5))" "(take 5 (interate inc 5))" "(take 5 (iterate inc 5))" "(iterate inc 5)" "(take 5 (iterate inc 5))" "(execute [[0 0 \\"_0101010_\\"] tup])" "(def tup (read-tuples-from-file2 \\"swap.txt\\"))" "(execute [[0 0 \\"_0101010_\\"] tup])" "(execute [[0 1 \\"_0101010_\\"] tup])" "(def ex (iterate (fn [[[s p t] tuples]] (execute [[s p t] tuples]))))" "(def ex (iterate (fn [[[s p t] tuples]] (execute [[s p t] tuples])) [[0 0 \\"_0101010_\\"] tup]))" "(take 5 ex)" "(take-while pos? )" "(pos? [1 0 \\"12\\"])" "(if (pos? [1 0 \\"12\\"]) 1 0)" "(def not-nil? (complement nil?))" "(if (not-nil? [1 0 \\"12\\"]) 1 0)" "(take-while not-nil? ex)" "ex" "(def ex (iterate (fn [[[s p t] tuples]] (execute [[s p t] tuples])) [[0 0 \\"_0101010_\\"] tup]))" "(take-while not-nil? ex)" "(def ex (iterate (fn [[[s p t] tuples]] [(execute [[s p t] tuples]) tup]) [[0 0 \\"_0101010_\\"] tup]))" "(take-while not-nil? ex)" "(def ex (iterate (fn [[[s p t] tuples]] [(execute [[s p t] tuples]) tuples]) [[0 0 \\"_0101010_\\"] tup]))" "(take-while not-nil? ex)" "(def ex (iterate (fn [[s p t] tuples] (execute [[s p t] tuples]) tuples) [0 0 \\"_0101010_\\"] tup))" "(def ex (iterate (fn [[[s p t] tuples]] [(execute [[s p t] tuples]) tuples]) [[0 0 \\"_0101010_\\"] tup]))" "(take 2 ex)" "(take 7 ex)" "(take 8 ex)" "(take 20 ex)" "(take 10 ex)" "(take 9 ex)" "(def ex (iterate (fn [[[s p t] tuples]] [(execute [[s p t] tuples]) tuples]) [[0 0 \\"_0101010_\\"] tup]))" "(take 9 ex)" "(take 10 ex)" "(take-while some nil? ex)" "(take-while (some nil?) ex)" "(take-while \#(some nil?) ex)" "(def has-nil? some nil?)" "(defn has-nil? [s] (some nil? s))" "(take-while (has-nil? ex) ex)" "(take-while \#(not-nil? (first %)) ex)" "(execute-main-loop 0 0 \\"_0101010_\\" tup true)" "(take 1 ex)" "(map \#(first %) (take 4 ex))" "(execute-main-loop 0 0 \\"_0101010_\\" tup true)" "(read-tuples-from-file2 \\"swap.txt\\")" "(def tups (read-tuples-from-file2 \\"swap.txt\\"))" "(map vector-to-tuple-string (keys tups))" "(map vector-to-tuple-string (vals tups))" "(map println (map vector-to-tuple-string (vals tups)))" "(apply println (map vector-to-tuple-string (vals tups)))" "(reduce merge  (map vector-to-tuple-string (vals tups)))" "(apply merge  (map vector-to-tuple-string (vals tups)))" "(apply (.append String)  (map vector-to-tuple-string (vals tups)))" "(apply clojure.string.append  (map vector-to-tuple-string (vals tups)))" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" ture)" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(execute-once [[1 0 \\"01\\"] (read-tuples-from-file2 \\"swap.txt\\")])" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" false)" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(str [12 2])" "(apply str [12 12])" "(apply str [12 12] 0)" "(apply conj [[1 2] [1 2]])" "(apply cons [[1 2] [1 2]])" "(apply cons [[1 2] 1 2])" "(apply conj [[1 2] 1 2])" "(apply str [\\"\!2\\" \\"123\\"])" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(butlast [1 2 3])" "(def act (run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true))" "act" "(def tups (read-tuples-from-file2 \\"swap.txt\\"))" "(trace act tups)" "(tups [0 0])" "(tups [0 \\\\1])" "act" "(.charAt String \\"23\\" 0)" "(.charAt \\"23\\" 0)" "(trace act tups)" "(apply str (\\"[ _ ]010101_ S\: 0 I\: _ NS\: 0 O\: _ D\: r\\" \\"_[ 0 ]10101_ S\: 0 I\: 0 NS\: 1 O\: 1 D\: r\\" \\"_1[ 1 ]0101_ S\: 1 I\: 1 NS\: 1 O\: 0 D\: r\\" \\"_10[ 0 ]101_ S\: 1 I\: 0 NS\: 1 O\: 1 D\: r\\" \\"_101[ 1 ]01_ S\: 1 I\: 1 NS\: 1 O\: 0 D\: r\\" \\"_1010[ 0 ]1_ S\: 1 I\: 0 NS\: 1 O\: 1 D\: r\\" \\"_10101[ 1 ]_ S\: 1 I\: 1 NS\: 1 O\: 0 D\: r\\" \\"_101010[ _ ] S\:  I\:  NS\:  O\:  D\: \\"))" "(apply str (\\"12\\" \\"123\\"))" "(apply str [\\"12\\" \\"123\\"])" "(trace act tups)" "(trace2 act tups)" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(if true (print \\"hi\\") 0)" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(trace act tups)" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(trace act tups)" "act" "tups" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(trace ([0 0 \\"_010101_\\"] [0 1 \\"_010101_\\"] [1 2 \\"_110101_\\"] [1 3 \\"_100101_\\"] [1 4 \\"_101101_\\"] [1 5 \\"_101001_\\"] [1 6 \\"_101011_\\"] [1 7 \\"_101010_\\"] {[1 \\\\0] [1 \\\\0 1 \\\\1 \\\\r], [1 \\\\1] [1 \\\\1 1 \\\\0 \\\\r], [0 \\\\1] [0 \\\\1 1 \\\\0 \\\\r], [0 \\\\0] [0 \\\\0 1 \\\\1 \\\\r], [0 \\\\_] [0 \\\\_ 0 \\\\_ \\\\r]})\\n       )" "(trace ([0 0 \\"_010101_\\"] [0 1 \\"_010101_\\"] [1 2 \\"_110101_\\"] [1 3 \\"_100101_\\"] [1 4 \\"_101101_\\"] [1 5 \\"_101001_\\"] [1 6 \\"_101011_\\"] [1 7 \\"_101010_\\"])\\n       {[1 \\\\0] [1 \\\\0 1 \\\\1 \\\\r], [1 \\\\1] [1 \\\\1 1 \\\\0 \\\\r], [0 \\\\1] [0 \\\\1 1 \\\\0 \\\\r], [0 \\\\0] [0 \\\\0 1 \\\\1 \\\\r], [0 \\\\_] [0 \\\\_ 0 \\\\_ \\\\r]})" "(trace '([0 0 \\"_010101_\\"] [0 1 \\"_010101_\\"] [1 2 \\"_110101_\\"]\\n                          [1 3 \\"_100101_\\"] [1 4 \\"_101101_\\"]\\n                          [1 5 \\"_101001_\\"] [1 6 \\"_101011_\\"]\\n                          [1 7 \\"_101010_\\"])\\n       {[1 \\\\0] [1 \\\\0 1 \\\\1 \\\\r], [1 \\\\1] [1 \\\\1 1 \\\\0 \\\\r], [0 \\\\1] [0 \\\\1 1 \\\\0 \\\\r], [0 \\\\0] [0 \\\\0 1 \\\\1 \\\\r], [0 \\\\_] [0 \\\\_ 0 \\\\_ \\\\r]})" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(def act (execute-main-loop 0 0 \\"_0101010\\" (read-tuples-from-file2 \\"swap.txt\\" true)))" "(def act (execute-main-loop 0 0 \\"_0101010\\" (read-tuples-from-file2 \\"swap.txt\\") true))" "act" "(butlast act)" "(def act (butlast act))" "act" "(def tup (read-tuples-from-file2 \\"swap.txt\\"))" "(trace act tup)" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(trace act tup)" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(def act (run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true))" "(trace act tups)" "(trace act tup)" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "tup" "(trace act tup)" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(trace (run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true) (read-tuples-from-file2 \\"swap.txt\\"))" "tup" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(trace act tups)" "(trace act tup)" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(print (trace act tup))" "(trace act tup)" "(print (trace act tup))" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(trace (into [] act) tup)" "(print (trace (into [] act) tup))" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "act" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "tup" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(test-trace act tup)" "act" "tup" "(.charAt \\"12\\" 0)" "(tup [0 \\\\_])" "(tuple-to-string (tup [0 \\\\_]))" "(str \\"\\\\n\\" (insert-brackets \\"_0101_\\" 1) \\"\\\\n\\")" "(test-trace act tup)" "(map \#(str \\"\\\\n\\" (insert-brackets (last %) (%1)) \\" \\"\\n             (tuple-to-string (tuples [(first %) (.charAt (last %) (% 1))])) )\\n     act)" "(map \#(str \\"\\\\n\\" (insert-brackets (last %) (%1)) \\" \\"\\n             (tuple-to-string (tup [(first %) (.charAt (last %) (% 1))])) )\\n     act)" "(map \#(print %) act)" "(map \#(%) act)" "(map \#(first %) act)" "act" "(map \#(last %) act)" "(test-trace act tup)" "(clojure.string/join (\\"\\\\n\\" \\"\\\\n\\"))" "(clojure.string/join [\\"\\\\n\\" \\"\\\\n\\"])" "(clojure.string/join (into [] (test-trace act tup)))" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(trace act tup)" "(print (trace act tup))" "(trace act tup)" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" true)" "(run-turing 0 0 \\"_010101_\\" \\"swap.txt\\" false)" "(defn sum-sqrt \\n\\t[n]\\n\\t(apply + (map \#(Math/sqrt %) (into [] (range 1 n 1)))))" "(sum-sqrt 4)" "(defn sum-triangles\\n\\t[v]\\n\\t(apply + (map (fn [[b h]] (* 0.5 b h)) v)))" "(sum-triangles [[3 4] [5 6] [7 8]])" "(defn map-average\\n\\t\\"Takes one student (a map) and returns a student average map\\"\\n\\t[m]\\n\\t(let [grades (\:grades m)]\\n\\t\\t{\:name (\:name m),\\n\\t\\t \:average (/ (apply + grades) (count m))}\\n\\t))" "(defn student-averages\\n\\t[v]\\n\\t(reduce\\n\\t\\t(fn [so-far student]\\n\\t\\t\\t(conj so-far (map-average student)))\\n\\t\\t[]\\n\\t\\tv))" "(def students [{\:name \\"fred\\", \:grades [85 79 65]}\\n               {\:name \\"phil\\", \:grades [72 81 91]}\\n               {\:name \\"sally\\",\:grades [65 62 58]}\\n               {\:name \\"kathy\\",\:grades [92 85 96]}])" "(student-averages students)" "(defn integrate\\n\\t[f start end intervals]\\n\\t(let [interval-length (/ (- end start) intervals)]\\n\\t\\t(apply + (map \#(* (f %) interval-length)\\n\\t\\t \\t(into [] (range start end interval-length))))))" "(integrate sin 0 Math/PI 1000)" "(integrate java.lang.Math/sin 0 java.lang.Math/PI 1000)" "(integrate \#(* % % %) 0 10 100)" "(run-turing 0 0 \\"_010101010_\\" \\"swap.txt\\" true)" "(read-tuples-from-file \\"swap.txt\\")" "(execute-main-loop 0 0 \\"_01010_\\" (read-tuples-from-file \\"swap.txt\\") true)" "(trace-string ([0 0 \\"_01010_\\"] [0 1 \\"_01010_\\"] [1 2 \\"_11010_\\"] [1 3 \\"_10010_\\"] [1 4 \\"_10110_\\"] [1 5 \\"_10100_\\"] [1 6 \\"_10101_\\"]) (read-tuples-from-file \\"swap.txt\\"))" "(trace-string '([0 0 \\"_01010_\\"] [0 1 \\"_01010_\\"] [1 2 \\"_11010_\\"] [1 3 \\"_10010_\\"] [1 4 \\"_10110_\\"] [1 5 \\"_10100_\\"] [1 6 \\"_10101_\\"]) (read-tuples-from-file \\"swap.txt\\"))" "(trace-string (execute-main-loop 0 0 \\"_01010_\\" (read-tuples-from-file \\"swap.txt\\") true) (read-tuples-from-file \\"swap.txt\\"))" "(run-turing 0 0 \\"-_99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999_\\" \\"tuples/incDecimal.txt\\" true)" "(run-turing 0 0 \\"_111_\\" \\"copy.txt\\" true)" "(def a (partial str \\"\\\\n\\" tuple-to-string))" "(a [0 0 0 0 0])" "(eval (a [0 0 0 0 0]))" "(run-turing 0 0 \\"_111_\\" \\"copy.txt\\" true)" "(read2 \\"swap.txt\\")" "(run-turing 0 0 \\"_111_\\" \\"copy.txt\\" true)" "(read2 \\"copy.txt\\")" "(clojure.string.split \\"t t t t\\")" "(clojure.string.split \\"t t t t\\" \#\\"\\\\s\\")" "(clojure.string/split \\"t t t t\\" \#\\"\\\\s\\")" "(clojure.string/split \\"t t t t\\")" "(read3 \\"copy.txt\\")" "(cloure.string/split-lines (slurp \\"copy.txt\\"))" "(clojure.string/split-lines (slurp \\"copy.txt\\"))" "(map clojure.string/split (clojure.string/split-lines (slurp \\"copy.txt\\")) \#\\"\\\\n\\")" "(map clojure.string/split (clojure.string/split-lines (slurp \\"copy.txt\\")))" "(butlast (map \#(clojure.string/split % \#\\"\\\\s\\")  (clojure.string/split-lines (slurp \\"copy.txt\\"))))" "(map \#(clojure.string/split % \#\\"\\\\s\\")  (clojure.string/split-lines (slurp \\"copy.txt\\")))" "(butlast (map \#(clojure.string/split % \#\\"\\\\s\\")  (clojure.string/split-lines (slurp \\"copy.txt\\"))))" "(map \#(remove nil? %) (butlast (map \#(clojure.string/split % \#\\"\\\\s\\")  (clojure.string/split-lines (slurp \\"copy.txt\\")))))" "(map \#(remove empty? %) (butlast (map \#(clojure.string/split % \#\\"\\\\s\\")  (clojure.string/split-lines (slurp \\"copy.txt\\")))))" "(map \#(into [] %) (map \#(remove empty? %) (butlast (map \#(clojure.string/split % \#\\"\\\\s\\")  (clojure.string/split-lines (slurp \\"copy.txt\\"))))))" "(into [](map \#(into [] %) (map \#(remove empty? %) (butlast (map \#(clojure.string/split % \#\\"\\\\s\\")  (clojure.string/split-lines (slurp \\"copy.txt\\")))))))" "(read2 \\"copy.txt\\")" "(run-turing 0 0 \\"_111_\\" \\"copy.txt\\" true)" "(run-turing 0 0 \\"_111000_\\" \\"copy.txt\\" true)" "(run-turing 0 0 \\"_000111_\\" \\"copy.txt\\" true)" "(run-turing 0 0 \\"_111_____\\" \\"copy.txt\\" true)" "(run-turing 0 0 \\"-111------\\" \\"copy.txt\\" true)" "(run-turing 0 0 \\"-1111111111111111111---------------------------\\" \\"copy.txt\\" true)" "(run-turing 0 0 \\"-_99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999_\\" \\"tuples/incDecimal.txt\\" true)" "(run-turing 0 0 \\"-_99999_\\" \\"incDecimal.txt\\" true)" "(read2 \\"incDecimal.txt\\")" "(read2 \\"swap.txt\\")" "(read2 \\"count.txt\\")" "(run-turing 0 0 \\"-_99999_\\" \\"incDecimal.txt\\" true)" "(run-turing 0 0 \\"-_99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999_\\" \\"tuples/incDecimal.txt\\" true)" "(run-turing 0 0 \\"-_99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999_\\"\\n            \\"incDecimal.txt\\" true)" "(run-turing 0 0 \\"-_99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999_\\"\\n            \\"incDecimal.txt\\" false)" "(run-turing 0 0 \\"-_123_\\" \\"incDecimal.txt\\")" "(run-turing 0 0 \\"-_123_\\" \\"incDecimal.txt\\" true)" "(run-turing 0 0 \\"-_129_\\" \\"incDecimal.txt\\" true)" "(run-turing 0 0 \\"-_199_\\" \\"incDecimal.txt\\" true)" "(run-turing 0 0 \\"-_-12_\\" \\"incDecimal.txt\\" true)" "(run-turing 0 0 \\"-_9999_\\" \\"incDecimal.txt\\" true)" "(def a [5 6])" "(.hashCode a)" "(def b [5 6])" "(.hashCode b)" "(.hashCode [93 3425 9 [45 23]])" "(.hashCode [[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]])" "(.hashCode [[[[[[[[[[[[[[[[[[1]]]]]]]]]]]]]]]]]])" "(def a (future (apply + (range 1e8))))" "a" "@a" "b" "a" "@a" "(time @a)" "(def a (future (apply + (range 1e8))))" "(time @a)" "(def a (future (apply + (range 1e8))))" "(time @a)" "(def a (future (apply + (range 1e9))))" "(time @a)" "b" "(time @a)" "(def a (promise))" "(def b (promise))" "(def c (promise))" "(future\\n  (deliver c (@a + @b))\\n  (println \\"done\\"))" "@c" "(deliver a 15)" "(deliver b 16)" "@a" "@b" "c" "@c" "a" "@a" "@c" "c" "(deliver a 15)" "(deliver b 12\\n      )" "@a" "@b" "@c" "@(future" "@(future (deliver c (+ @a @b)))" "@c" "(def a (promise))" "(def b (promise))" "(def c (promise))" "(future (deliver c (+ @a @b)) \:done)" "@c" "(deliver a 15)" "(deliver b 16)" "@c" "(run-turing 0 0 \\"-111-1111---------------------\\" \\"test.txt\\")" "(run-turing 0 0 \\"-111-1111---------------------\\" \\"test.txt\\" true)" "(time (run-turing 0 0 \\"-111-1111---------------------\\" \\"test.txt\\" true))" "(time (doall (repeat 100 (run-turing 0 0 \\"-111-1111---------------------\\" \\"test.txt\\" true))))" "(time (doall (repeat 100 (run-turing 0 0 \\"-111-1111---------------------\\" \\"test.txt\\" false))))" "(run-turing 0 0 \\"-_999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999_\\" \\"incDecimal.txt\\" true)" "(run-turing 0 0 \\"_010101\\" \\"swap.txt\\" true)" "(def tups (read2 \\"swap.txt\\"))" "tups" "(time (execute-main-loop 0 0 \\"_010101010_\\" tups true))" "(print (clojure.string/join \\n                         (into [] (butlast \\n                                    (trace-string (execute-main-loop 0 0 \\"_010101010_\\" tups true) tups)))))" "(time (print (clojure.string/join \\n                               (into [] (butlast \\n                                          (trace-string (execute-main-loop 0 0 \\"_010101010_\\" tups true) tups))))))" "(time (execute-main-loop 0 0 \\"_010101010_\\" tups true))"]
eclipse.preferences.version=1
